#ifndef POSITIONER_H
#define POSITIONER_H

#include <QString>
#include <QMetaType>
#include <QDateTime>

namespace Etrek::ScanProtocol::Data::Entity {

    /**
     * @brief Represents a physical/semantic positioner definition.
     *
     * DB schema (table: positioners):
     *   - id INT AUTO_INCREMENT PRIMARY KEY
     *   - position_name VARCHAR(100) NOT NULL UNIQUE
     *   - description   VARCHAR(255) NULL
     *   - create_date   TIMESTAMP DEFAULT CURRENT_TIMESTAMP
     *   - update_date   TIMESTAMP DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP
     *
     * Notes:
     *   - create_date / update_date are generated by the DB.
     *   - position_name is a unique business key (case-insensitivity depends on DB collation).
     */
    class Positioner {
    public:
        int       Id = -1;            ///< Primary key; set by DB on insert (AUTO_INCREMENT).
        QString   PositionName;       ///< Unique human-readable name; maps to position_name.
        QString   Description;        ///< Optional description; maps to description (nullable).
        QDateTime CreateDate;         ///< Set by DB (CURRENT_TIMESTAMP) on insert.
        QDateTime UpdateDate;         ///< Set by DB on insert/update (ON UPDATE CURRENT_TIMESTAMP).

        Positioner() = default;

        /**
         * @brief Equality: if both IDs are valid (>=0), compare IDs; otherwise compare unique name.
         * This avoids treating two unsaved (-1) instances as equal.
         */
        bool operator==(const Positioner& other) const noexcept {
            if (Id >= 0 && other.Id >= 0) return Id == other.Id;
            return PositionName.compare(other.PositionName, Qt::CaseInsensitive) == 0;
        }
    };

} // namespace Etrek::ScanProtocol::Data::Entity

Q_DECLARE_METATYPE(Etrek::ScanProtocol::Data::Entity::Positioner)

#endif // POSITIONER_H
